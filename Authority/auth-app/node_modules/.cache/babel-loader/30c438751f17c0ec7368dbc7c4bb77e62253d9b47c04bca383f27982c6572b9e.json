{"ast":null,"code":"var _jsxFileName = \"/Users/SGBHAT/Library/CloudStorage/OneDrive-iiit-b/IIIT-B/Blood-Donation-Application/Authority/auth-app/src/home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { Html5QrcodeScanner } from \"html5-qrcode\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QRcodeScanner() {\n  _s();\n  useEffect(() => {\n    function onScanSuccess(decodedText, decodedResult) {\n      // axios.post('/scannSuccess',{})\n      // Handle the scanned code as you like\n      console.log(`Code matched = `, decodedResult.result.text.branch);\n    }\n    function onScanFailure(error) {\n      // Handle scan failure, usually better to ignore and keep scanning\n      console.warn(`Code scan error = ${error}`);\n    }\n    let html5QrcodeScanner = new Html5QrcodeScanner(\"reader\", {\n      fps: 10,\n      qrbox: {\n        width: 300,\n        height: 300\n      }\n    }, /* verbose= */false);\n    html5QrcodeScanner.render(onScanSuccess, onScanFailure);\n\n    // Clean up on unmount\n    return () => {\n      html5QrcodeScanner.clear();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"reader\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n}\n_s(QRcodeScanner, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = QRcodeScanner;\nexport default QRcodeScanner;\nvar _c;\n$RefreshReg$(_c, \"QRcodeScanner\");","map":{"version":3,"names":["React","useEffect","Html5QrcodeScanner","axios","jsxDEV","_jsxDEV","QRcodeScanner","_s","onScanSuccess","decodedText","decodedResult","console","log","result","text","branch","onScanFailure","error","warn","html5QrcodeScanner","fps","qrbox","width","height","render","clear","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/SGBHAT/Library/CloudStorage/OneDrive-iiit-b/IIIT-B/Blood-Donation-Application/Authority/auth-app/src/home.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { Html5QrcodeScanner } from \"html5-qrcode\";\nimport axios from 'axios'\nfunction QRcodeScanner() {\n  useEffect(() => {\n    function onScanSuccess(decodedText, decodedResult) {\n      // axios.post('/scannSuccess',{})\n      // Handle the scanned code as you like\n      console.log(`Code matched = `, decodedResult.result.text.branch);\n    }\n\n    function onScanFailure(error) {\n      // Handle scan failure, usually better to ignore and keep scanning\n      console.warn(`Code scan error = ${error}`);\n    }\n\n    let html5QrcodeScanner = new Html5QrcodeScanner(\n      \"reader\",\n      { fps: 10, qrbox: { width: 300, height: 300 } },\n      /* verbose= */ false\n    );\n    html5QrcodeScanner.render(onScanSuccess, onScanFailure);\n\n    // Clean up on unmount\n    return () => {\n      html5QrcodeScanner.clear();\n    };\n  }, []);\n\n  return <div id=\"reader\"></div>;\n}\n\nexport default QRcodeScanner;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,kBAAkB,QAAQ,cAAc;AACjD,OAAOC,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACzB,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvBN,SAAS,CAAC,MAAM;IACd,SAASO,aAAaA,CAACC,WAAW,EAAEC,aAAa,EAAE;MACjD;MACA;MACAC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,aAAa,CAACG,MAAM,CAACC,IAAI,CAACC,MAAM,CAAC;IAClE;IAEA,SAASC,aAAaA,CAACC,KAAK,EAAE;MAC5B;MACAN,OAAO,CAACO,IAAI,CAAC,qBAAqBD,KAAK,EAAE,CAAC;IAC5C;IAEA,IAAIE,kBAAkB,GAAG,IAAIjB,kBAAkB,CAC7C,QAAQ,EACR;MAAEkB,GAAG,EAAE,EAAE;MAAEC,KAAK,EAAE;QAAEC,KAAK,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAI;IAAE,CAAC,EAC/C,cAAe,KACjB,CAAC;IACDJ,kBAAkB,CAACK,MAAM,CAAChB,aAAa,EAAEQ,aAAa,CAAC;;IAEvD;IACA,OAAO,MAAM;MACXG,kBAAkB,CAACM,KAAK,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOpB,OAAA;IAAKqB,EAAE,EAAC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAChC;AAACvB,EAAA,CA3BQD,aAAa;AAAAyB,EAAA,GAAbzB,aAAa;AA6BtB,eAAeA,aAAa;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}